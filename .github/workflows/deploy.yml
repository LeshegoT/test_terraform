name: Deploy Infrastructure

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole
          aws-region: ${{ vars.AWS_REGION || 'af-south-1' }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # Set up Docker Buildx
          docker buildx create --use
          
          # Get the ECR repository URL from terraform output
          ECR_REPOSITORY=$(terraform output -raw ecr_repository_url)
          
          # Login to ECR
          aws ecr get-login-password --region ${{ vars.AWS_REGION || 'af-south-1' }} | docker login --username AWS --password-stdin $ECR_REPOSITORY
          
          # Build and push Docker image
          docker buildx build --platform linux/amd64 -t $ECR_REPOSITORY:latest -t $ECR_REPOSITORY:${{ github.sha }} --push .
        
      - name: Deploy to ECS
        run: |
          # Force new deployment of ECS service
          aws ecs update-service --cluster $(terraform output -raw ecs_cluster_name) --service $(terraform output -raw ecs_service_name) --force-new-deployment
