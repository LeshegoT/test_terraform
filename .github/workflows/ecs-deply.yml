name: Deploy
permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build --no-restore

      - name: Run Tests
        run: dotnet test --no-build --verbosity normal

  publish:
    needs: build
    runs-on: ubuntu-latest
    environment: Production 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::574836245203:role/GitHubActionsOIDCRole
          aws-region: af-south-1 

      - name: Get Terraform Outputs
        uses: dflook/terraform-output@v1
        id: tf-outputs
        with:
          path: terraform

      - name: Publish Docker Image to Amazon ECR
        run: |
          REPOSITORY_URI=${{ steps.tf-outputs.outputs.ecr_repository_url }}
          IMAGE_TAG=latest

          docker build -t $REPOSITORY_URI:$IMAGE_TAG -f docker/Dockerfile .
          aws ecr get-login-password --region af-south-1 | docker login --username AWS --password-stdin $REPOSITORY_URI
          docker push $REPOSITORY_URI:$IMAGE_TAG

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    environment: Production 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDCRole
          aws-region: af-south-1 
      - name: Setup Terraform
        uses: hashicorp/terraform-github-actions@v2
        with:
          terraform_version: ">= 1.0"
          setup_only: true

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Plan Terraform
        id: tf-plan
        run: terraform plan -no-color \
          -var="app_name=${{ github.event.repository.name }}" \
          -var="db_name=${{ secrets.DB_NAME }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="ecr_repository_url=${{ steps.tf-outputs.outputs.ecr_repository_url }}" \
          -var="rds_endpoint=${{ steps.tf-outputs.outputs.rds_endpoint }}"
        working-directory: terraform
        continue-on-error: true

      - name: Show Terraform Plan
        if: steps.tf-plan.outcome == 'success'
        run: echo "Terraform Plan:\n$(cat terraform/terraform.tfplan)"

      - name: Apply Terraform
        if: steps.tf-plan.outcome == 'success'
        run: terraform apply -auto-approve \
          -var="app_name=${{ github.event.repository.name }}" \
          -var="db_name=${{ secrets.DB_NAME }}" \
          -var="db_username=${{ secrets.DB_USERNAME }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="ecr_repository_url=${{ steps.tf-outputs.outputs.ecr_repository_url }}" \
          -var="rds_endpoint=${{ steps.tf-outputs.outputs.rds_endpoint }}"
        working-directory: terraform

      - name: Wait for ECS Service Stability
        run: |
          aws ecs wait service-stable --cluster "${{ github.event.repository.name }}-cluster" \
            --service "${{ github.event.repository.name }}-service"
        working-directory: terraform
        env:
          AWS_REGION: af-south-1 